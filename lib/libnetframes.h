/* libnetframes.h generated by valac 0.20.1, the Vala compiler, do not modify */


#ifndef __LIB_LIBNETFRAMES_H__
#define __LIB_LIBNETFRAMES_H__

#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <pcap/pcap.h>

G_BEGIN_DECLS


#define NET_FRAMES_TYPE_GROUPED_FRAMES (net_frames_grouped_frames_get_type ())
#define NET_FRAMES_GROUPED_FRAMES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_GROUPED_FRAMES, NetFramesGroupedFrames))
#define NET_FRAMES_GROUPED_FRAMES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_GROUPED_FRAMES, NetFramesGroupedFramesClass))
#define NET_FRAMES_IS_GROUPED_FRAMES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_GROUPED_FRAMES))
#define NET_FRAMES_IS_GROUPED_FRAMES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_GROUPED_FRAMES))
#define NET_FRAMES_GROUPED_FRAMES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_GROUPED_FRAMES, NetFramesGroupedFramesClass))

typedef struct _NetFramesGroupedFrames NetFramesGroupedFrames;
typedef struct _NetFramesGroupedFramesClass NetFramesGroupedFramesClass;
typedef struct _NetFramesGroupedFramesPrivate NetFramesGroupedFramesPrivate;

#define NET_FRAMES_TYPE_FRAME (net_frames_frame_get_type ())
#define NET_FRAMES_FRAME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_FRAME, NetFramesFrame))
#define NET_FRAMES_FRAME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_FRAME, NetFramesFrameClass))
#define NET_FRAMES_IS_FRAME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_FRAME))
#define NET_FRAMES_IS_FRAME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_FRAME))
#define NET_FRAMES_FRAME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_FRAME, NetFramesFrameClass))

typedef struct _NetFramesFrame NetFramesFrame;
typedef struct _NetFramesFrameClass NetFramesFrameClass;

#define NET_FRAMES_TYPE_SORTED_LIST (net_frames_sorted_list_get_type ())
#define NET_FRAMES_SORTED_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_SORTED_LIST, NetFramesSortedList))
#define NET_FRAMES_SORTED_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_SORTED_LIST, NetFramesSortedListClass))
#define NET_FRAMES_IS_SORTED_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_SORTED_LIST))
#define NET_FRAMES_IS_SORTED_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_SORTED_LIST))
#define NET_FRAMES_SORTED_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_SORTED_LIST, NetFramesSortedListClass))

typedef struct _NetFramesSortedList NetFramesSortedList;
typedef struct _NetFramesSortedListClass NetFramesSortedListClass;

#define NET_FRAMES_TYPE_FRAMES (net_frames_frames_get_type ())
#define NET_FRAMES_FRAMES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_FRAMES, NetFramesFrames))
#define NET_FRAMES_FRAMES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_FRAMES, NetFramesFramesClass))
#define NET_FRAMES_IS_FRAMES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_FRAMES))
#define NET_FRAMES_IS_FRAMES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_FRAMES))
#define NET_FRAMES_FRAMES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_FRAMES, NetFramesFramesClass))

typedef struct _NetFramesFrames NetFramesFrames;
typedef struct _NetFramesFramesClass NetFramesFramesClass;

#define NET_FRAMES_TYPE_CAPTURE (net_frames_capture_get_type ())
#define NET_FRAMES_CAPTURE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_CAPTURE, NetFramesCapture))
#define NET_FRAMES_CAPTURE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_CAPTURE, NetFramesCaptureClass))
#define NET_FRAMES_IS_CAPTURE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_CAPTURE))
#define NET_FRAMES_IS_CAPTURE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_CAPTURE))
#define NET_FRAMES_CAPTURE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_CAPTURE, NetFramesCaptureClass))

typedef struct _NetFramesCapture NetFramesCapture;
typedef struct _NetFramesCaptureClass NetFramesCaptureClass;
typedef struct _NetFramesCapturePrivate NetFramesCapturePrivate;

#define NET_FRAMES_TYPE_PCAP_HEADER (net_frames_pcap_header_get_type ())
#define NET_FRAMES_PCAP_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_PCAP_HEADER, NetFramesPCapHeader))
#define NET_FRAMES_PCAP_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_PCAP_HEADER, NetFramesPCapHeaderClass))
#define NET_FRAMES_IS_PCAP_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_PCAP_HEADER))
#define NET_FRAMES_IS_PCAP_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_PCAP_HEADER))
#define NET_FRAMES_PCAP_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_PCAP_HEADER, NetFramesPCapHeaderClass))

typedef struct _NetFramesPCapHeader NetFramesPCapHeader;
typedef struct _NetFramesPCapHeaderClass NetFramesPCapHeaderClass;

#define NET_FRAMES_TYPE_CONNECTION (net_frames_connection_get_type ())
#define NET_FRAMES_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_CONNECTION, NetFramesConnection))
#define NET_FRAMES_CONNECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_CONNECTION, NetFramesConnectionClass))
#define NET_FRAMES_IS_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_CONNECTION))
#define NET_FRAMES_IS_CONNECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_CONNECTION))
#define NET_FRAMES_CONNECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_CONNECTION, NetFramesConnectionClass))

typedef struct _NetFramesConnection NetFramesConnection;
typedef struct _NetFramesConnectionClass NetFramesConnectionClass;

#define NET_FRAMES_TYPE_SESSION (net_frames_session_get_type ())
#define NET_FRAMES_SESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_SESSION, NetFramesSession))
#define NET_FRAMES_SESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_SESSION, NetFramesSessionClass))
#define NET_FRAMES_IS_SESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_SESSION))
#define NET_FRAMES_IS_SESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_SESSION))
#define NET_FRAMES_SESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_SESSION, NetFramesSessionClass))

typedef struct _NetFramesSession NetFramesSession;
typedef struct _NetFramesSessionClass NetFramesSessionClass;

#define NET_FRAMES_TYPE_HOSTS (net_frames_hosts_get_type ())
#define NET_FRAMES_HOSTS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_HOSTS, NetFramesHosts))
#define NET_FRAMES_HOSTS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_HOSTS, NetFramesHostsClass))
#define NET_FRAMES_IS_HOSTS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_HOSTS))
#define NET_FRAMES_IS_HOSTS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_HOSTS))
#define NET_FRAMES_HOSTS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_HOSTS, NetFramesHostsClass))

typedef struct _NetFramesHosts NetFramesHosts;
typedef struct _NetFramesHostsClass NetFramesHostsClass;

#define NET_FRAMES_TYPE_CONNECTIONS (net_frames_connections_get_type ())
#define NET_FRAMES_CONNECTIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_CONNECTIONS, NetFramesConnections))
#define NET_FRAMES_CONNECTIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_CONNECTIONS, NetFramesConnectionsClass))
#define NET_FRAMES_IS_CONNECTIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_CONNECTIONS))
#define NET_FRAMES_IS_CONNECTIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_CONNECTIONS))
#define NET_FRAMES_CONNECTIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_CONNECTIONS, NetFramesConnectionsClass))

typedef struct _NetFramesConnections NetFramesConnections;
typedef struct _NetFramesConnectionsClass NetFramesConnectionsClass;

#define NET_FRAMES_TYPE_SEQ_ACK_FRAME (net_frames_seq_ack_frame_get_type ())
#define NET_FRAMES_SEQ_ACK_FRAME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_SEQ_ACK_FRAME, NetFramesseq_ack_frame))
#define NET_FRAMES_SEQ_ACK_FRAME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_SEQ_ACK_FRAME, NetFramesseq_ack_frameClass))
#define NET_FRAMES_IS_SEQ_ACK_FRAME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_SEQ_ACK_FRAME))
#define NET_FRAMES_IS_SEQ_ACK_FRAME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_SEQ_ACK_FRAME))
#define NET_FRAMES_SEQ_ACK_FRAME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_SEQ_ACK_FRAME, NetFramesseq_ack_frameClass))

typedef struct _NetFramesseq_ack_frame NetFramesseq_ack_frame;
typedef struct _NetFramesseq_ack_frameClass NetFramesseq_ack_frameClass;
typedef struct _NetFramesseq_ack_framePrivate NetFramesseq_ack_framePrivate;

#define NET_FRAMES_TYPE_PCAP_FRAME (net_frames_pcap_frame_get_type ())
#define NET_FRAMES_PCAP_FRAME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_PCAP_FRAME, NetFramesPCapFrame))
#define NET_FRAMES_PCAP_FRAME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_PCAP_FRAME, NetFramesPCapFrameClass))
#define NET_FRAMES_IS_PCAP_FRAME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_PCAP_FRAME))
#define NET_FRAMES_IS_PCAP_FRAME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_PCAP_FRAME))
#define NET_FRAMES_PCAP_FRAME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_PCAP_FRAME, NetFramesPCapFrameClass))

typedef struct _NetFramesPCapFrame NetFramesPCapFrame;
typedef struct _NetFramesPCapFrameClass NetFramesPCapFrameClass;
typedef struct _NetFramesPCapFramePrivate NetFramesPCapFramePrivate;

#define NET_FRAMES_TYPE_PCAP_RECORD_HEADER (net_frames_pcap_record_header_get_type ())
#define NET_FRAMES_PCAP_RECORD_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_PCAP_RECORD_HEADER, NetFramesPCapRecordHeader))
#define NET_FRAMES_PCAP_RECORD_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_PCAP_RECORD_HEADER, NetFramesPCapRecordHeaderClass))
#define NET_FRAMES_IS_PCAP_RECORD_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_PCAP_RECORD_HEADER))
#define NET_FRAMES_IS_PCAP_RECORD_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_PCAP_RECORD_HEADER))
#define NET_FRAMES_PCAP_RECORD_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_PCAP_RECORD_HEADER, NetFramesPCapRecordHeaderClass))

typedef struct _NetFramesPCapRecordHeader NetFramesPCapRecordHeader;
typedef struct _NetFramesPCapRecordHeaderClass NetFramesPCapRecordHeaderClass;

#define NET_FRAMES_TYPE_ETHER_HEADER (net_frames_ether_header_get_type ())
#define NET_FRAMES_ETHER_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_ETHER_HEADER, NetFramesEtherHeader))
#define NET_FRAMES_ETHER_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_ETHER_HEADER, NetFramesEtherHeaderClass))
#define NET_FRAMES_IS_ETHER_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_ETHER_HEADER))
#define NET_FRAMES_IS_ETHER_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_ETHER_HEADER))
#define NET_FRAMES_ETHER_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_ETHER_HEADER, NetFramesEtherHeaderClass))

typedef struct _NetFramesEtherHeader NetFramesEtherHeader;
typedef struct _NetFramesEtherHeaderClass NetFramesEtherHeaderClass;

#define NET_FRAMES_TYPE_IP_HEADER (net_frames_ip_header_get_type ())
#define NET_FRAMES_IP_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_IP_HEADER, NetFramesIPHeader))
#define NET_FRAMES_IP_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_IP_HEADER, NetFramesIPHeaderClass))
#define NET_FRAMES_IS_IP_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_IP_HEADER))
#define NET_FRAMES_IS_IP_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_IP_HEADER))
#define NET_FRAMES_IP_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_IP_HEADER, NetFramesIPHeaderClass))

typedef struct _NetFramesIPHeader NetFramesIPHeader;
typedef struct _NetFramesIPHeaderClass NetFramesIPHeaderClass;

#define NET_FRAMES_TYPE_TCP_HEADER (net_frames_tcp_header_get_type ())
#define NET_FRAMES_TCP_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_TCP_HEADER, NetFramesTCPHeader))
#define NET_FRAMES_TCP_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_TCP_HEADER, NetFramesTCPHeaderClass))
#define NET_FRAMES_IS_TCP_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_TCP_HEADER))
#define NET_FRAMES_IS_TCP_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_TCP_HEADER))
#define NET_FRAMES_TCP_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_TCP_HEADER, NetFramesTCPHeaderClass))

typedef struct _NetFramesTCPHeader NetFramesTCPHeader;
typedef struct _NetFramesTCPHeaderClass NetFramesTCPHeaderClass;

#define NET_FRAMES_TYPE_UDP_HEADER (net_frames_udp_header_get_type ())
#define NET_FRAMES_UDP_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_UDP_HEADER, NetFramesUDPHeader))
#define NET_FRAMES_UDP_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_UDP_HEADER, NetFramesUDPHeaderClass))
#define NET_FRAMES_IS_UDP_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_UDP_HEADER))
#define NET_FRAMES_IS_UDP_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_UDP_HEADER))
#define NET_FRAMES_UDP_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_UDP_HEADER, NetFramesUDPHeaderClass))

typedef struct _NetFramesUDPHeader NetFramesUDPHeader;
typedef struct _NetFramesUDPHeaderClass NetFramesUDPHeaderClass;
typedef struct _NetFramesFramePrivate NetFramesFramePrivate;

#define NET_FRAMES_TYPE_TCP_FLAGS (net_frames_tcp_flags_get_type ())
#define NET_FRAMES_TCP_FLAGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_TCP_FLAGS, NetFramesTCPFlags))
#define NET_FRAMES_TCP_FLAGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_TCP_FLAGS, NetFramesTCPFlagsClass))
#define NET_FRAMES_IS_TCP_FLAGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_TCP_FLAGS))
#define NET_FRAMES_IS_TCP_FLAGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_TCP_FLAGS))
#define NET_FRAMES_TCP_FLAGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_TCP_FLAGS, NetFramesTCPFlagsClass))

typedef struct _NetFramesTCPFlags NetFramesTCPFlags;
typedef struct _NetFramesTCPFlagsClass NetFramesTCPFlagsClass;
typedef struct _NetFramesSortedListPrivate NetFramesSortedListPrivate;
typedef struct _NetFramesFramesPrivate NetFramesFramesPrivate;
typedef struct _NetFramesHostsPrivate NetFramesHostsPrivate;
typedef struct _NetFramesConnectionPrivate NetFramesConnectionPrivate;

#define NET_FRAMES_TYPE_SESSIONS (net_frames_sessions_get_type ())
#define NET_FRAMES_SESSIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_SESSIONS, NetFramesSessions))
#define NET_FRAMES_SESSIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_SESSIONS, NetFramesSessionsClass))
#define NET_FRAMES_IS_SESSIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_SESSIONS))
#define NET_FRAMES_IS_SESSIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_SESSIONS))
#define NET_FRAMES_SESSIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_SESSIONS, NetFramesSessionsClass))

typedef struct _NetFramesSessions NetFramesSessions;
typedef struct _NetFramesSessionsClass NetFramesSessionsClass;
typedef struct _NetFramesConnectionsPrivate NetFramesConnectionsPrivate;

#define NET_FRAMES_TYPE_SOCKET_INFOS (net_frames_socket_infos_get_type ())
#define NET_FRAMES_SOCKET_INFOS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_SOCKET_INFOS, NetFramesSocketInfos))
#define NET_FRAMES_SOCKET_INFOS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_SOCKET_INFOS, NetFramesSocketInfosClass))
#define NET_FRAMES_IS_SOCKET_INFOS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_SOCKET_INFOS))
#define NET_FRAMES_IS_SOCKET_INFOS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_SOCKET_INFOS))
#define NET_FRAMES_SOCKET_INFOS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_SOCKET_INFOS, NetFramesSocketInfosClass))

typedef struct _NetFramesSocketInfos NetFramesSocketInfos;
typedef struct _NetFramesSocketInfosClass NetFramesSocketInfosClass;
typedef struct _NetFramesSocketInfosPrivate NetFramesSocketInfosPrivate;
typedef struct _NetFramesSessionPrivate NetFramesSessionPrivate;

#define NET_FRAMES_SESSION_TYPE_SESSION_TYPE (net_frames_session_session_type_get_type ())

#define NET_FRAMES_TYPE_FLOW_INFORMATIONS (net_frames_flow_informations_get_type ())
#define NET_FRAMES_FLOW_INFORMATIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_FLOW_INFORMATIONS, NetFramesFlowInformations))
#define NET_FRAMES_FLOW_INFORMATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_FLOW_INFORMATIONS, NetFramesFlowInformationsClass))
#define NET_FRAMES_IS_FLOW_INFORMATIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_FLOW_INFORMATIONS))
#define NET_FRAMES_IS_FLOW_INFORMATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_FLOW_INFORMATIONS))
#define NET_FRAMES_FLOW_INFORMATIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_FLOW_INFORMATIONS, NetFramesFlowInformationsClass))

typedef struct _NetFramesFlowInformations NetFramesFlowInformations;
typedef struct _NetFramesFlowInformationsClass NetFramesFlowInformationsClass;
typedef struct _NetFramesSessionsPrivate NetFramesSessionsPrivate;
typedef struct _NetFramesEtherHeaderPrivate NetFramesEtherHeaderPrivate;
typedef struct _NetFramesIPHeaderPrivate NetFramesIPHeaderPrivate;
typedef struct _NetFramesTCPHeaderPrivate NetFramesTCPHeaderPrivate;
typedef struct _NetFramesUDPHeaderPrivate NetFramesUDPHeaderPrivate;
typedef struct _NetFramesPCapHeaderPrivate NetFramesPCapHeaderPrivate;
typedef struct _NetFramesPCapRecordHeaderPrivate NetFramesPCapRecordHeaderPrivate;
typedef struct _NetFramesTCPFlagsPrivate NetFramesTCPFlagsPrivate;
typedef struct _NetFramesFlowInformationsPrivate NetFramesFlowInformationsPrivate;

#define NET_FRAMES_TYPE_FLOW_TCP_SESSION (net_frames_flow_tcp_session_get_type ())
#define NET_FRAMES_FLOW_TCP_SESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NET_FRAMES_TYPE_FLOW_TCP_SESSION, NetFramesFlowTCPSession))
#define NET_FRAMES_FLOW_TCP_SESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NET_FRAMES_TYPE_FLOW_TCP_SESSION, NetFramesFlowTCPSessionClass))
#define NET_FRAMES_IS_FLOW_TCP_SESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NET_FRAMES_TYPE_FLOW_TCP_SESSION))
#define NET_FRAMES_IS_FLOW_TCP_SESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NET_FRAMES_TYPE_FLOW_TCP_SESSION))
#define NET_FRAMES_FLOW_TCP_SESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NET_FRAMES_TYPE_FLOW_TCP_SESSION, NetFramesFlowTCPSessionClass))

typedef struct _NetFramesFlowTCPSession NetFramesFlowTCPSession;
typedef struct _NetFramesFlowTCPSessionClass NetFramesFlowTCPSessionClass;
typedef struct _NetFramesFlowTCPSessionPrivate NetFramesFlowTCPSessionPrivate;

#define NET_FRAMES_FLOW_TCP_SESSION_TYPE_STATUS (net_frames_flow_tcp_session_status_get_type ())

struct _NetFramesGroupedFrames {
	GTypeInstance parent_instance;
	volatile int ref_count;
	NetFramesGroupedFramesPrivate * priv;
	NetFramesFrame* from_frame;
	NetFramesFrames* to_frames;
};

struct _NetFramesGroupedFramesClass {
	GTypeClass parent_class;
	void (*finalize) (NetFramesGroupedFrames *self);
};

struct _NetFramesCapture {
	GObject parent_instance;
	NetFramesCapturePrivate * priv;
	GInetAddress* capture_from;
	NetFramesPCapHeader* pcap_header;
	gboolean compatibility_mode;
};

struct _NetFramesCaptureClass {
	GObjectClass parent_class;
};

struct _NetFramesseq_ack_frame {
	GTypeInstance parent_instance;
	volatile int ref_count;
	NetFramesseq_ack_framePrivate * priv;
	guint32 seq;
	guint32 ack;
};

struct _NetFramesseq_ack_frameClass {
	GTypeClass parent_class;
	void (*finalize) (NetFramesseq_ack_frame *self);
};

struct _NetFramesPCapFrame {
	GObject parent_instance;
	NetFramesPCapFramePrivate * priv;
	NetFramesPCapRecordHeader* rec;
	NetFramesEtherHeader* ether_hdr;
	NetFramesIPHeader* ip_hdr;
	NetFramesTCPHeader* tcp_hdr;
	NetFramesUDPHeader* udp_hdr;
	guint8* datas;
	gint datas_length1;
};

struct _NetFramesPCapFrameClass {
	GObjectClass parent_class;
};

struct _NetFramesFrame {
	GObject parent_instance;
	NetFramesFramePrivate * priv;
	NetFramesPCapFrame* pcap_frame;
	guint32 num;
	gchar* dissect;
	gchar* proto;
	NetFramesseq_ack_frame* seq_ack;
};

struct _NetFramesFrameClass {
	GObjectClass parent_class;
};

struct _NetFramesSortedList {
	GObject parent_instance;
	NetFramesSortedListPrivate * priv;
	GeeArrayList* list;
};

struct _NetFramesSortedListClass {
	GObjectClass parent_class;
	void (*clear) (NetFramesSortedList* self);
};

struct _NetFramesFrames {
	NetFramesSortedList parent_instance;
	NetFramesFramesPrivate * priv;
};

struct _NetFramesFramesClass {
	NetFramesSortedListClass parent_class;
};

struct _NetFramesHosts {
	GeeArrayList parent_instance;
	NetFramesHostsPrivate * priv;
};

struct _NetFramesHostsClass {
	GeeArrayListClass parent_class;
};

struct _NetFramesConnection {
	GObject parent_instance;
	NetFramesConnectionPrivate * priv;
	GInetAddress* host_a;
	GInetAddress* host_b;
	NetFramesSessions* sessions;
	gint32 latency;
	gint32 suggested_latency;
};

struct _NetFramesConnectionClass {
	GObjectClass parent_class;
};

struct _NetFramesConnections {
	GeeArrayList parent_instance;
	NetFramesConnectionsPrivate * priv;
	gint total_size;
	gint size_from_host_a;
	gint size_from_host_b;
};

struct _NetFramesConnectionsClass {
	GeeArrayListClass parent_class;
};

struct _NetFramesSocketInfos {
	GObject parent_instance;
	NetFramesSocketInfosPrivate * priv;
	GInetAddress* addr;
	guint16 port;
};

struct _NetFramesSocketInfosClass {
	GObjectClass parent_class;
};

typedef enum  {
	NET_FRAMES_SESSION_SESSION_TYPE_UNKNOWN,
	NET_FRAMES_SESSION_SESSION_TYPE_TCP,
	NET_FRAMES_SESSION_SESSION_TYPE_UDP
} NetFramesSessionSESSION_TYPE;

struct _NetFramesSession {
	GObject parent_instance;
	NetFramesSessionPrivate * priv;
	NetFramesSocketInfos* host_a;
	NetFramesSocketInfos* host_b;
	GeeArrayList* frames;
	NetFramesSocketInfos* first_frame_host;
	NetFramesSocketInfos* second_frame_host;
	guint32 total_size;
	guint32 size_from_host_a;
	guint32 size_from_host_b;
	guint32 seq_syn;
	guint32 seq_syn_ack;
	NetFramesSessionSESSION_TYPE session_type;
	NetFramesFlowInformations* flow_informations;
};

struct _NetFramesSessionClass {
	GObjectClass parent_class;
};

struct _NetFramesSessions {
	GeeArrayList parent_instance;
	NetFramesSessionsPrivate * priv;
	guint32 total_size;
	guint32 size_from_host_a;
	guint32 size_from_host_b;
};

struct _NetFramesSessionsClass {
	GeeArrayListClass parent_class;
};

struct _NetFramesEtherHeader {
	GObject parent_instance;
	NetFramesEtherHeaderPrivate * priv;
	guint8 ether_dhost[6];
	guint8 ether_shost[6];
	guint16 ether_type;
};

struct _NetFramesEtherHeaderClass {
	GObjectClass parent_class;
};

struct _NetFramesIPHeader {
	GObject parent_instance;
	NetFramesIPHeaderPrivate * priv;
	guint8 ip_vhl;
	guint8 ip_tos;
	guint16 ip_len;
	guint16 ip_id;
	guint16 ip_off;
	guint8 ip_ttl;
	guint8 ip_proto;
	guint16 ip_sum;
	guint32 ip_src;
	guint32 ip_dst;
	GInetAddress* src;
	GInetAddress* dst;
};

struct _NetFramesIPHeaderClass {
	GObjectClass parent_class;
};

struct _NetFramesTCPHeader {
	GObject parent_instance;
	NetFramesTCPHeaderPrivate * priv;
	guint16 th_sport;
	guint16 th_dport;
	guint32 th_seq;
	guint32 th_ack;
	guint8 th_offset;
	guint8 th_flags;
	guint16 th_win;
	guint16 th_sum;
	guint16 th_urg;
	guint8* options;
	gint options_length1;
	NetFramesTCPFlags* tcp_flags;
};

struct _NetFramesTCPHeaderClass {
	GObjectClass parent_class;
};

struct _NetFramesUDPHeader {
	GObject parent_instance;
	NetFramesUDPHeaderPrivate * priv;
	guint16 uh_sport;
	guint16 uh_dport;
	guint16 uh_len;
	guint16 uh_sum;
};

struct _NetFramesUDPHeaderClass {
	GObjectClass parent_class;
};

struct _NetFramesPCapHeader {
	GObject parent_instance;
	NetFramesPCapHeaderPrivate * priv;
	guint32 magic_number;
	guint16 version_major;
	guint16 version_minor;
	gint32 thiszone;
	guint32 sigfigs;
	guint32 snaplen;
	guint32 network;
};

struct _NetFramesPCapHeaderClass {
	GObjectClass parent_class;
};

struct _NetFramesPCapRecordHeader {
	GObject parent_instance;
	NetFramesPCapRecordHeaderPrivate * priv;
	GTimeVal ts;
	guint32 incl_len;
	guint32 orig_len;
};

struct _NetFramesPCapRecordHeaderClass {
	GObjectClass parent_class;
};

struct _NetFramesTCPFlags {
	GTypeInstance parent_instance;
	volatile int ref_count;
	NetFramesTCPFlagsPrivate * priv;
	guint8 flags;
};

struct _NetFramesTCPFlagsClass {
	GTypeClass parent_class;
	void (*finalize) (NetFramesTCPFlags *self);
};

struct _NetFramesFlowInformations {
	GObject parent_instance;
	NetFramesFlowInformationsPrivate * priv;
	GeeHashMap* assoc_grouped_frames;
	GeeTreeMap* assoc_seq_acknowledged;
	GeeArrayList* seq_ack_done;
};

struct _NetFramesFlowInformationsClass {
	GObjectClass parent_class;
};

typedef enum  {
	NET_FRAMES_FLOW_TCP_SESSION_STATUS_NIHL = 0,
	NET_FRAMES_FLOW_TCP_SESSION_STATUS_SYN_SENT,
	NET_FRAMES_FLOW_TCP_SESSION_STATUS_SYN_RECEIVED,
	NET_FRAMES_FLOW_TCP_SESSION_STATUS_ESTABLISHED,
	NET_FRAMES_FLOW_TCP_SESSION_STATUS_FIN_WAIT_1,
	NET_FRAMES_FLOW_TCP_SESSION_STATUS_FIN_WAIT_2__CLOSE_WAIT,
	NET_FRAMES_FLOW_TCP_SESSION_STATUS_TIME_WAIT__LAST_ACK,
	NET_FRAMES_FLOW_TCP_SESSION_STATUS_LAST_ACK,
	NET_FRAMES_FLOW_TCP_SESSION_STATUS_CLOSED,
	NET_FRAMES_FLOW_TCP_SESSION_STATUS_RESET,
	NET_FRAMES_FLOW_TCP_SESSION_STATUS_EXPIRED
} NetFramesFlowTCPSessionSTATUS;

struct _NetFramesFlowTCPSession {
	GTypeInstance parent_instance;
	volatile int ref_count;
	NetFramesFlowTCPSessionPrivate * priv;
	NetFramesFlowTCPSessionSTATUS status;
};

struct _NetFramesFlowTCPSessionClass {
	GTypeClass parent_class;
	void (*finalize) (NetFramesFlowTCPSession *self);
};

typedef gint64 (*NetFramesComparator) (void* a, void* b, void* user_data);

gpointer net_frames_grouped_frames_ref (gpointer instance);
void net_frames_grouped_frames_unref (gpointer instance);
GParamSpec* net_frames_param_spec_grouped_frames (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void net_frames_value_set_grouped_frames (GValue* value, gpointer v_object);
void net_frames_value_take_grouped_frames (GValue* value, gpointer v_object);
gpointer net_frames_value_get_grouped_frames (const GValue* value);
GType net_frames_grouped_frames_get_type (void) G_GNUC_CONST;
GType net_frames_frame_get_type (void) G_GNUC_CONST;
GType net_frames_sorted_list_get_type (void) G_GNUC_CONST;
GType net_frames_frames_get_type (void) G_GNUC_CONST;
NetFramesGroupedFrames* net_frames_grouped_frames_new (void);
NetFramesGroupedFrames* net_frames_grouped_frames_construct (GType object_type);
GType net_frames_capture_get_type (void) G_GNUC_CONST;
GType net_frames_pcap_header_get_type (void) G_GNUC_CONST;
NetFramesFrame* net_frames_capture_get_first_frame_captured (NetFramesCapture* self);
NetFramesCapture* net_frames_capture_new_Null (void);
NetFramesCapture* net_frames_capture_construct_Null (GType object_type);
NetFramesCapture* net_frames_capture_new (const gchar* filename, GInetAddress* capture_from, gboolean shark_decode);
NetFramesCapture* net_frames_capture_construct (GType object_type, const gchar* filename, GInetAddress* capture_from, gboolean shark_decode);
void net_frames_capture_set_captured_host (NetFramesCapture* self, GInetAddress* host);
void net_frames_capture_save_pcap (NetFramesCapture* self, const gchar* uri);
void net_frames_capture_build_structures (NetFramesCapture* self);
GType net_frames_connection_get_type (void) G_GNUC_CONST;
void net_frames_capture_delete_connection (NetFramesCapture* self, NetFramesConnection* c);
void net_frames_capture_delete_host (NetFramesCapture* self, GInetAddress* host);
GType net_frames_session_get_type (void) G_GNUC_CONST;
void net_frames_capture_delete_session (NetFramesCapture* self, NetFramesSession* s);
void net_frames_capture_display_host_frames (NetFramesCapture* self, GInetAddress* host);
void net_frames_capture_display_connection_frames (NetFramesCapture* self, GInetAddress* host);
void net_frames_capture_display (NetFramesCapture* self);
const gchar* net_frames_capture_get_filename (NetFramesCapture* self);
NetFramesFrames* net_frames_capture_get_frames (NetFramesCapture* self);
GType net_frames_hosts_get_type (void) G_GNUC_CONST;
NetFramesHosts* net_frames_capture_get_hosts (NetFramesCapture* self);
GType net_frames_connections_get_type (void) G_GNUC_CONST;
NetFramesConnections* net_frames_capture_get_connections (NetFramesCapture* self);
gpointer net_frames_seq_ack_frame_ref (gpointer instance);
void net_frames_seq_ack_frame_unref (gpointer instance);
GParamSpec* net_frames_param_spec_seq_ack_frame (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void net_frames_value_set_seq_ack_frame (GValue* value, gpointer v_object);
void net_frames_value_take_seq_ack_frame (GValue* value, gpointer v_object);
gpointer net_frames_value_get_seq_ack_frame (const GValue* value);
GType net_frames_seq_ack_frame_get_type (void) G_GNUC_CONST;
NetFramesseq_ack_frame* net_frames_seq_ack_frame_new_from_uint32 (guint32 s, guint32 a);
NetFramesseq_ack_frame* net_frames_seq_ack_frame_construct_from_uint32 (GType object_type, guint32 s, guint32 a);
NetFramesseq_ack_frame* net_frames_seq_ack_frame_new (NetFramesFrame* f);
NetFramesseq_ack_frame* net_frames_seq_ack_frame_construct (GType object_type, NetFramesFrame* f);
GType net_frames_pcap_frame_get_type (void) G_GNUC_CONST;
GType net_frames_pcap_record_header_get_type (void) G_GNUC_CONST;
GType net_frames_ether_header_get_type (void) G_GNUC_CONST;
GType net_frames_ip_header_get_type (void) G_GNUC_CONST;
GType net_frames_tcp_header_get_type (void) G_GNUC_CONST;
GType net_frames_udp_header_get_type (void) G_GNUC_CONST;
NetFramesPCapFrame* net_frames_pcap_frame_new (guint8* buffer, int buffer_length1);
NetFramesPCapFrame* net_frames_pcap_frame_construct (GType object_type, guint8* buffer, int buffer_length1);
NetFramesPCapFrame* net_frames_pcap_frame_new_from_buffer (NetFramesPCapRecordHeader* p_rec, guint8* pkt_data, int pkt_data_length1);
NetFramesPCapFrame* net_frames_pcap_frame_construct_from_buffer (GType object_type, NetFramesPCapRecordHeader* p_rec, guint8* pkt_data, int pkt_data_length1);
NetFramesPCapFrame* net_frames_pcap_frame_new_from_datainputstream (NetFramesPCapRecordHeader* p_rec, GDataInputStream* dis, gboolean compat_mode);
NetFramesPCapFrame* net_frames_pcap_frame_construct_from_datainputstream (GType object_type, NetFramesPCapRecordHeader* p_rec, GDataInputStream* dis, gboolean compat_mode);
void net_frames_pcap_frame_write_stream (NetFramesPCapFrame* self, GDataOutputStream* dos);
void net_frames_pcap_frame_display (NetFramesPCapFrame* self);
NetFramesFrame* net_frames_frame_new_PCap (NetFramesPCapFrame* f);
NetFramesFrame* net_frames_frame_construct_PCap (GType object_type, NetFramesPCapFrame* f);
NetFramesFrame* net_frames_frame_new_Shark_Array (gchar** ar_datas, int ar_datas_length1);
NetFramesFrame* net_frames_frame_construct_Shark_Array (GType object_type, gchar** ar_datas, int ar_datas_length1);
NetFramesFrame* net_frames_frame_new_Shark_String (const gchar* s);
NetFramesFrame* net_frames_frame_construct_Shark_String (GType object_type, const gchar* s);
gboolean net_frames_frame_equal (NetFramesFrame* self, NetFramesFrame* f);
gboolean net_frames_frame_has_host (NetFramesFrame* self, GInetAddress* host);
gboolean net_frames_frame_has_port (NetFramesFrame* self, guint16 port);
void net_frames_frame_display (NetFramesFrame* self);
void net_frames_frame_display_flags (NetFramesFrame* self);
NetFramesConnection* net_frames_frame_create_connection (NetFramesFrame* self);
NetFramesSession* net_frames_frame_create_session (NetFramesFrame* self);
NetFramesFrame* net_frames_frame_new (void);
NetFramesFrame* net_frames_frame_construct (GType object_type);
GInetAddress* net_frames_frame_get_src (NetFramesFrame* self);
void net_frames_frame_set_src (NetFramesFrame* self, GInetAddress* value);
GInetAddress* net_frames_frame_get_dst (NetFramesFrame* self);
void net_frames_frame_set_dst (NetFramesFrame* self, GInetAddress* value);
guint16 net_frames_frame_get_src_port (NetFramesFrame* self);
guint16 net_frames_frame_get_dst_port (NetFramesFrame* self);
guint32 net_frames_frame_get_len (NetFramesFrame* self);
void net_frames_frame_get_time (NetFramesFrame* self, GTimeVal* result);
void net_frames_frame_set_time (NetFramesFrame* self, GTimeVal* value);
gpointer net_frames_tcp_flags_ref (gpointer instance);
void net_frames_tcp_flags_unref (gpointer instance);
GParamSpec* net_frames_param_spec_tcp_flags (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void net_frames_value_set_tcp_flags (GValue* value, gpointer v_object);
void net_frames_value_take_tcp_flags (GValue* value, gpointer v_object);
gpointer net_frames_value_get_tcp_flags (const GValue* value);
GType net_frames_tcp_flags_get_type (void) G_GNUC_CONST;
NetFramesTCPFlags* net_frames_frame_get_tcp_flags (NetFramesFrame* self);
guint32 net_frames_frame_get_rel_seq (NetFramesFrame* self);
guint32 net_frames_frame_get_rel_ack (NetFramesFrame* self);
guint16 net_frames_frame_get_ip_checksum (NetFramesFrame* self);
NetFramesConnection* net_frames_frame_get_connection (NetFramesFrame* self);
NetFramesSession* net_frames_frame_get_session (NetFramesFrame* self);
gint64 net_frames_comparator (void* a, void* b);
NetFramesFrames* net_frames_frames_new (void);
NetFramesFrames* net_frames_frames_construct (GType object_type);
NetFramesFrame* net_frames_frames_search_frame (NetFramesFrames* self, NetFramesFrame* to_search);
NetFramesFrame* net_frames_frames_get_frame_by_num (NetFramesFrames* self, guint32 num);
void net_frames_frames_tshark_decode (NetFramesFrames* self, const gchar* filename, NetFramesCapture* capture);
void net_frames_frames_load_pcap_file (NetFramesFrames* self, const gchar* filename, NetFramesCapture* capture, gboolean compatibility_mode);
void net_frames_frames_save_pcap (NetFramesFrames* self, const gchar* output_filename);
void net_frames_frames_display (NetFramesFrames* self);
gboolean net_frames_hosts_contains (NetFramesHosts* self, GInetAddress* addr);
void net_frames_hosts_display (NetFramesHosts* self);
NetFramesHosts* net_frames_hosts_new (void);
NetFramesHosts* net_frames_hosts_construct (GType object_type);
#define NET_FRAMES_DEFAULT_LAN_LATENCY 1000
#define NET_FRAMES_DEFAULT_WAN_LATENCY 15000
extern gint net_frames_latency;
GType net_frames_sessions_get_type (void) G_GNUC_CONST;
NetFramesConnection* net_frames_connection_new (GInetAddress* a, GInetAddress* b);
NetFramesConnection* net_frames_connection_construct (GType object_type, GInetAddress* a, GInetAddress* b);
gint64 net_frames_connection_calcul_suggested_latency (NetFramesConnection* self, GInetAddress* capture_from);
gint net_frames_connection_total_frames (NetFramesConnection* self);
void net_frames_connection_delete_session (NetFramesConnection* self, NetFramesSession* s);
gboolean net_frames_connection_is_equal (NetFramesConnection* self, NetFramesConnection* c);
gboolean net_frames_connection_has_host (NetFramesConnection* self, GInetAddress* host);
void net_frames_connection_display (NetFramesConnection* self);
gchar* net_frames_connection_to_string (NetFramesConnection* self);
guint32 net_frames_connection_get_total_size (NetFramesConnection* self);
guint32 net_frames_connection_get_size_from_host_a (NetFramesConnection* self);
guint32 net_frames_connection_get_size_from_host_b (NetFramesConnection* self);
NetFramesConnection* net_frames_connections_search_connection (NetFramesConnections* self, NetFramesConnection* to_search);
GType net_frames_socket_infos_get_type (void) G_GNUC_CONST;
NetFramesSession* net_frames_connections_search_session_by_host (NetFramesConnections* self, NetFramesConnections* connections, NetFramesSocketInfos* host);
NetFramesConnection* net_frames_connections_search_connection_by_host (NetFramesConnections* self, GInetAddress* host);
GInetAddress* net_frames_connections_get_host_by_max_peers (NetFramesConnections* self, NetFramesHosts* hosts);
void net_frames_connections_display (NetFramesConnections* self);
NetFramesConnections* net_frames_connections_new (void);
NetFramesConnections* net_frames_connections_construct (GType object_type);
gchar* net_frames_latency_to_string (gint32 latency);
NetFramesSocketInfos* net_frames_socket_infos_new (GInetAddress* a, guint16 p);
NetFramesSocketInfos* net_frames_socket_infos_construct (GType object_type, GInetAddress* a, guint16 p);
gboolean net_frames_socket_infos_is_equals (NetFramesSocketInfos* self, NetFramesSocketInfos* s);
gchar* net_frames_socket_infos_to_string (NetFramesSocketInfos* self);
GType net_frames_session_session_type_get_type (void) G_GNUC_CONST;
GType net_frames_flow_informations_get_type (void) G_GNUC_CONST;
NetFramesSession* net_frames_session_new (NetFramesSocketInfos* a, NetFramesSocketInfos* b);
NetFramesSession* net_frames_session_construct (GType object_type, NetFramesSocketInfos* a, NetFramesSocketInfos* b);
NetFramesSession* net_frames_session_new_from_addr (GInetAddress* a, guint16 port_a, GInetAddress* b, guint16 port_b);
NetFramesSession* net_frames_session_construct_from_addr (GType object_type, GInetAddress* a, guint16 port_a, GInetAddress* b, guint16 port_b);
gboolean net_frames_session_is_equals (NetFramesSession* self, NetFramesSession* s);
gboolean net_frames_session_in_session (NetFramesSession* self, NetFramesSession* s);
gboolean net_frames_session_has_host (NetFramesSession* self, GInetAddress* host);
gboolean net_frames_session_get_next_from_frame (NetFramesSession* self, NetFramesFrame* f, NetFramesFrame** next);
NetFramesFrame* net_frames_session_get_from_flags (NetFramesSession* self, guint8 flags);
void net_frames_session_display (NetFramesSession* self);
gboolean net_frames_session_detect_client_server (NetFramesSession* self);
NetFramesFrame* net_frames_session_get_frame_by_num (NetFramesSession* self, guint32 n);
gchar* net_frames_session_to_string (NetFramesSession* self);
NetFramesSession* net_frames_sessions_search_session (NetFramesSessions* self, NetFramesSession* to_search);
void net_frames_sessions_display (NetFramesSessions* self);
NetFramesSessions* net_frames_sessions_new (void);
NetFramesSessions* net_frames_sessions_construct (GType object_type);
#define NET_FRAMES_ETHER_ADDR_LEN 6
#define NET_FRAMES_ETHER_TYPE_LEN 2
#define NET_FRAMES_ETHER_CRC_LEN 4
#define NET_FRAMES_ETHER_HDR_LEN ((NET_FRAMES_ETHER_ADDR_LEN * 2) + NET_FRAMES_ETHER_TYPE_LEN)
#define NET_FRAMES_ETHER_MIN_LEN 64
#define NET_FRAMES_ETHER_MAX_LEN 1518
#define NET_FRAMES_PROTO_TCP 0x06
#define NET_FRAMES_PROTO_UDP 0x11
NetFramesEtherHeader* net_frames_ether_header_new_from_buffer (guint8* pkt, int pkt_length1, gint* cursor);
NetFramesEtherHeader* net_frames_ether_header_construct_from_buffer (GType object_type, guint8* pkt, int pkt_length1, gint* cursor);
NetFramesEtherHeader* net_frames_ether_header_new_from_inputstream (GDataInputStream* dis, gboolean compat_mode);
NetFramesEtherHeader* net_frames_ether_header_construct_from_inputstream (GType object_type, GDataInputStream* dis, gboolean compat_mode);
void net_frames_ether_header_write_stream (NetFramesEtherHeader* self, GDataOutputStream* dos);
gulong net_frames_ether_header_size (void);
void net_frames_ether_header_display (NetFramesEtherHeader* self);
NetFramesEtherHeader* net_frames_ether_header_new (void);
NetFramesEtherHeader* net_frames_ether_header_construct (GType object_type);
NetFramesIPHeader* net_frames_ip_header_new_from_buffer (guint8* pkt, int pkt_length1, gint* cursor);
NetFramesIPHeader* net_frames_ip_header_construct_from_buffer (GType object_type, guint8* pkt, int pkt_length1, gint* cursor);
NetFramesIPHeader* net_frames_ip_header_new_from_inputstream (GDataInputStream* dis, gboolean compat_mode);
NetFramesIPHeader* net_frames_ip_header_construct_from_inputstream (GType object_type, GDataInputStream* dis, gboolean compat_mode);
void net_frames_ip_header_write_stream (NetFramesIPHeader* self, GDataOutputStream* dos);
gulong net_frames_ip_header_size (void);
void net_frames_ip_header_display (NetFramesIPHeader* self);
NetFramesIPHeader* net_frames_ip_header_new (void);
NetFramesIPHeader* net_frames_ip_header_construct (GType object_type);
NetFramesTCPHeader* net_frames_tcp_header_new_from_buffer (guint8* pkt, int pkt_length1, gint* cursor);
NetFramesTCPHeader* net_frames_tcp_header_construct_from_buffer (GType object_type, guint8* pkt, int pkt_length1, gint* cursor);
NetFramesTCPHeader* net_frames_tcp_header_new_from_inputstream (GDataInputStream* dis, gboolean compat_mode);
NetFramesTCPHeader* net_frames_tcp_header_construct_from_inputstream (GType object_type, GDataInputStream* dis, gboolean compat_mode);
void net_frames_tcp_header_write_stream (NetFramesTCPHeader* self, GDataOutputStream* dos);
gulong net_frames_tcp_header_size (void);
void net_frames_tcp_header_display (NetFramesTCPHeader* self);
NetFramesTCPHeader* net_frames_tcp_header_new (void);
NetFramesTCPHeader* net_frames_tcp_header_construct (GType object_type);
gint net_frames_tcp_header_get_length (NetFramesTCPHeader* self);
NetFramesUDPHeader* net_frames_udp_header_new_from_buffer (guint8* pkt, int pkt_length1, gint* cursor);
NetFramesUDPHeader* net_frames_udp_header_construct_from_buffer (GType object_type, guint8* pkt, int pkt_length1, gint* cursor);
NetFramesUDPHeader* net_frames_udp_header_new_from_inputstream (GDataInputStream* dis, gboolean compat_mode);
NetFramesUDPHeader* net_frames_udp_header_construct_from_inputstream (GType object_type, GDataInputStream* dis, gboolean compat_mode);
void net_frames_udp_header_write_stream (NetFramesUDPHeader* self, GDataOutputStream* dos);
gulong net_frames_udp_header_size (void);
NetFramesUDPHeader* net_frames_udp_header_new (void);
NetFramesUDPHeader* net_frames_udp_header_construct (GType object_type);
NetFramesPCapHeader* net_frames_pcap_header_new_from_datainputstream (GDataInputStream* dis, gboolean compat_mode);
NetFramesPCapHeader* net_frames_pcap_header_construct_from_datainputstream (GType object_type, GDataInputStream* dis, gboolean compat_mode);
void net_frames_pcap_header_write_stream (NetFramesPCapHeader* self, GDataOutputStream* dos);
void net_frames_pcap_header_display (NetFramesPCapHeader* self);
NetFramesPCapHeader* net_frames_pcap_header_new (void);
NetFramesPCapHeader* net_frames_pcap_header_construct (GType object_type);
NetFramesPCapRecordHeader* net_frames_pcap_record_header_new_from_PCap_header (struct pcap_pkthdr* header);
NetFramesPCapRecordHeader* net_frames_pcap_record_header_construct_from_PCap_header (GType object_type, struct pcap_pkthdr* header);
NetFramesPCapRecordHeader* net_frames_pcap_record_header_new_from_datainputstream (GDataInputStream* dis, gboolean compat_mode);
NetFramesPCapRecordHeader* net_frames_pcap_record_header_construct_from_datainputstream (GType object_type, GDataInputStream* dis, gboolean compat_mode);
void net_frames_pcap_record_header_write_stream (NetFramesPCapRecordHeader* self, GDataOutputStream* dos);
NetFramesPCapRecordHeader* net_frames_pcap_record_header_new (void);
NetFramesPCapRecordHeader* net_frames_pcap_record_header_construct (GType object_type);
#define NET_FRAMES_CWR ((guint8) 0x0080)
#define NET_FRAMES_ECN ((guint8) 0x0040)
#define NET_FRAMES_URG ((guint8) 0x0020)
#define NET_FRAMES_ACK ((guint8) 0x0010)
#define NET_FRAMES_PSH ((guint8) 0x0008)
#define NET_FRAMES_RST ((guint8) 0x0004)
#define NET_FRAMES_SYN ((guint8) 0x0002)
#define NET_FRAMES_FIN ((guint8) 0x0001)
NetFramesTCPFlags* net_frames_tcp_flags_new (guint8 value);
NetFramesTCPFlags* net_frames_tcp_flags_construct (GType object_type, guint8 value);
gchar* net_frames_tcp_flags_to_string (NetFramesTCPFlags* self);
gboolean net_frames_tcp_flags_equal (NetFramesTCPFlags* self, NetFramesTCPFlags* f);
gboolean net_frames_tcp_flags_get_SYN (NetFramesTCPFlags* self);
gboolean net_frames_tcp_flags_get_ACK (NetFramesTCPFlags* self);
gboolean net_frames_tcp_flags_get_PSH (NetFramesTCPFlags* self);
gboolean net_frames_tcp_flags_get_RST (NetFramesTCPFlags* self);
gboolean net_frames_tcp_flags_get_FIN (NetFramesTCPFlags* self);
gboolean net_frames_tcp_flags_get_URG (NetFramesTCPFlags* self);
void net_frames_hexdump (guint8* buffer, int buffer_length1, guint32 len, gint largeur);
gchar* net_frames_frame_to_string (NetFramesSession* s, NetFramesFrame* f);
NetFramesFlowInformations* net_frames_flow_informations_new (NetFramesSession* s);
NetFramesFlowInformations* net_frames_flow_informations_construct (GType object_type, NetFramesSession* s);
gboolean net_frames_flow_informations_has_reference_frame (NetFramesFlowInformations* self, NetFramesFrame* f, NetFramesFrame** reference);
void net_frames_flow_informations_display_groups (NetFramesFlowInformations* self);
void net_frames_flow_informations_display_seq_ack (NetFramesFlowInformations* self);
gpointer net_frames_flow_tcp_session_ref (gpointer instance);
void net_frames_flow_tcp_session_unref (gpointer instance);
GParamSpec* net_frames_param_spec_flow_tcp_session (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void net_frames_value_set_flow_tcp_session (GValue* value, gpointer v_object);
void net_frames_value_take_flow_tcp_session (GValue* value, gpointer v_object);
gpointer net_frames_value_get_flow_tcp_session (const GValue* value);
GType net_frames_flow_tcp_session_get_type (void) G_GNUC_CONST;
GType net_frames_flow_tcp_session_status_get_type (void) G_GNUC_CONST;
NetFramesFlowTCPSession* net_frames_flow_tcp_session_new (NetFramesSession* s);
NetFramesFlowTCPSession* net_frames_flow_tcp_session_construct (GType object_type, NetFramesSession* s);
gboolean net_frames_flow_tcp_session_go_after_handshake (NetFramesFlowTCPSession* self);
void net_frames_flow_tcp_session_determine_status (NetFramesFlowTCPSession* self);
gboolean net_frames_flow_tcp_session_eos (NetFramesFlowTCPSession* self);
gboolean net_frames_flow_tcp_session_next (NetFramesFlowTCPSession* self, NetFramesFrame** f);
gboolean net_frames_flow_tcp_session_has_next (NetFramesFlowTCPSession* self);
gboolean net_frames_flow_tcp_session_first (NetFramesFlowTCPSession* self, NetFramesFrame** f);
NetFramesFrame* net_frames_flow_tcp_session_get (NetFramesFlowTCPSession* self, gint p_index);
gboolean net_frames_flow_tcp_session_previous (NetFramesFlowTCPSession* self);
gboolean net_frames_flow_tcp_session_get_previous (NetFramesFlowTCPSession* self, NetFramesFrame** f);
gboolean net_frames_flow_tcp_session_has_previous (NetFramesFlowTCPSession* self);
gboolean net_frames_flow_tcp_session_last (NetFramesFlowTCPSession* self);
gint net_frames_flow_tcp_session_index (NetFramesFlowTCPSession* self);
gint net_frames_flow_tcp_session_get_size (NetFramesFlowTCPSession* self);
NetFramesSortedList* net_frames_sorted_list_new (GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, NetFramesComparator cmp, void* cmp_target);
NetFramesSortedList* net_frames_sorted_list_construct (GType object_type, GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, NetFramesComparator cmp, void* cmp_target);
gboolean net_frames_sorted_list_add_list (NetFramesSortedList* self, GeeList* items);
void net_frames_sorted_list_clear (NetFramesSortedList* self);
gint net_frames_sorted_list_get_count (NetFramesSortedList* self);
gpointer net_frames_sorted_list_get_at (NetFramesSortedList* self, gint index);
gint net_frames_sorted_list_index_of (NetFramesSortedList* self, gconstpointer search);
gint net_frames_sorted_list_locate (NetFramesSortedList* self, gconstpointer search, gboolean altered, GEqualFunc equal_func);
gpointer net_frames_sorted_list_remove_at (NetFramesSortedList* self, gint index);
void net_frames_sorted_list_resort (NetFramesSortedList* self, NetFramesComparator new_cmp, void* new_cmp_target);
gboolean net_frames_sorted_list_resort_item (NetFramesSortedList* self, gconstpointer item);
NetFramesSortedList* net_frames_sorted_list_copy (NetFramesSortedList* self);
GeeList* net_frames_sorted_list_get_read_only_view_as_list (NetFramesSortedList* self);


G_END_DECLS

#endif
